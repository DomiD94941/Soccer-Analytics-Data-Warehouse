from airflow.sdk import dag, task, task_group, Variable
from airflow.utils.log.logging_mixin import LoggingMixin
from airflow.sensors.base import PokeReturnValue

@dag
def seasons_dag():

    @task.sql(conn_id="oracle_default")
    def create_seasons_table():
        """
        Create SEASONS table if it does not exist.
        """

        return """
        DECLARE
          e_exists EXCEPTION;
          PRAGMA EXCEPTION_INIT(e_exists, -955);
        BEGIN
          EXECUTE IMMEDIATE '
            CREATE TABLE SEASONS (
              SEASON_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
              SEASON_YEAR NUMBER NOT NULL
            )';
        EXCEPTION
          WHEN e_exists THEN NULL;
        END;
        """

    @task.sensor(poke_interval=30, timeout=120)
    def is_api_available() -> PokeReturnValue:
        """
        Check if the API is available.
        """
        import requests

        log = LoggingMixin().log

        api_key = Variable.get("API_KEY")
        url = "https://v3.football.api-sports.io/leagues/seasons"
        headers = {
            "x-rapidapi-host": "v3.football.api-sports.io",
            "x-rapidapi-key": api_key   
        }
        
        try:
            response = requests.get(url, headers=headers)
            log.info("API response status: %s", response.status_code)
            response.raise_for_status()
            payload = response.json()
        except requests.RequestException as e:
            log.warning("API not available yet: %s", e)
            return PokeReturnValue(is_done=False, xcom_value=None)
        
        return PokeReturnValue(is_done=True, xcom_value=payload)
    
    @task
    def are_seasons_exist(seasons: dict) -> list:
        """
        Validate that seasons exist in the API response.
        """
        from airflow.exceptions import AirflowSkipException

        log = LoggingMixin().log
        available_seasons = []
        if not available_seasons:
            log.warning("No seasons found in API response.")
            raise AirflowSkipException("No seasons found in API response.")
        
        log.info("Found %d seasons", len(available_seasons))
        return available_seasons

    @task
    def format_seasons(available_seasons: list[int]) -> list[dict[str, int]]:
        """
        Transform raw API payload to table-shaped dicts with column names
        matching the SEASONS table schema.
        """
        return [{"SEASON_YEAR": int(season)} for season in available_seasons]
    

